# llvmtools: Binutils
# Build and install as cmlfs

# Set stage0 clang as C/C++ compiler
export CC=clang CXX=clang++

# Configure in dedicated build directory
mkdir -v build && cd build

# Configure source
../configure --prefix=/llvmtools \
  --with-lib-path=/llvmtools/lib \
  --disable-nls \
  --disable-werror \
  --with-sysroot

# Build
make

# Fails, need texinfo installed before

# Install
make install

# Clean source to rebuild linker
make -C ld clean

# Build and install linker that will be used later after adjusting toolchain
make -C ld LIB_PATH=/usr/lib:/lib
cp -v ld/ld-new /llvmtools/bin/ld.bfd-new

# Binary tools from LLVM will be the default.
for b in addr2line ar as nm objcopy objdump ranlib readelf \
         size strings strip
do
  mv -v  /llvmtools/bin/{$b,$b.gnu}
  ln -sv llvm-$b /llvmtools/bin/$b
done

mv -v    /llvmtools/bin/{c++filt,c++filt.gnu}
ln -sv  llvm-cxxfilt /llvmtools/bin/c++filt

# There are no LLVM counterparts for gprof & elfedit

# Create script to binutils as the default binary tools
# since some packages are hardcoded.
cat > /llvmtools/bin/set-gnu-bin-mode << "EOF"
#! /bin/bash
echo "[ 1 / 1 ] Setting GNU binutils as system binary tools..." && \
for b in addr2line ar as nm objcopy objdump ranlib readelf size strings strip c++filt
do
  rm -v         /llvmtools/bin/$b
  ln -sv $b.gnu /llvmtools/bin/$b
done                                          && \
echo "[ info  ] GNU Binutils  set as system default binary tools"
EOF
chmod -v +x /llvmtools/bin/set-gnu-bin-mode

unset CARGS
