# Download mussel to build a toolchain
cd $CMLFS/sources
git clone https://github.com/firasuke/mussel

# For this build, use commit 26c50d6362731bc54ca9f92ac31b3f95e885c3c7
# as future clones of repos may have an newer package versions not yet
# validated to build for CMLFS.
# This is also the last commit before mussel switch to b3sum
cd mussel
git checkout 26c50d6362731bc54ca9f92ac31b3f95e885c3c7

# BMLFS now has b3sum. Can use a newer mussel. The following
# commit was tested to work:
git checkout : 593559a117e8b4b86348e8da1e72b5d5c61580df

# Make sure host has all requirements:
./check.sh

# Modify ./mussel.sh to change these:
# MPREFIX="/cgnutools"
# MSYSROOT="/cgnutools"
sed -i '70d' mussel.sh && \
sed -i '70 i MPREFIX="/cgnutools"' mussel.sh && \
sed -i '71d' mussel.sh && \
sed -i '71 i MSYSROOT="/cgnutools"' mussel.sh

# Modify ./mussel to add a vendor in target tuple
# Set vendor as 'pc'. If omitted, clang defaults to 'unknown'
patch -Np0 -i ../patches/mussel-add-vendor-set-sysroot.patch

# If host uses clang instead of GCC,
# Apply patch to add compatibility links for cross AR and RANLIB
# and not compile ISL (ISL fails to configure with clang)
patch -Np1 -i ../patches/mussel-dont-compile-isl.patch 

# Build toolchain. Ommit -p in not building in parallel and using all
# the host's CPU cores:
sudo ./mussel.sh x86_64 -l -o -k -p

# Make sure cgnutools is owned by cmlfs
sudo chown -vR cmlfs:cmlfs $CMLFS/cgnutools

# Move misplaced headers and files:
mv -v /cgnutools/usr/lib/*     /cgnutools/lib/
mv -v /cgnutools/usr/include/* /cgnutools/include/
rm -rfv /cgnutools/usr/{include,lib}
ln -sv ../lib     /cgnutools/usr/lib
ln -sv ../include /cgnutools/usr/include

# Remove unneeded manpages
rm -rf  /cgnutools/share/man

# The new cross compiler has built-in specs which refer to the musl
# dynamic loader  /lib/ld-musl-x86_64.so.1... which will not exist on
# glibc hosts. We have to adjust this to build up the llvmtools with
# /llvmtools/lib/ld-musl-x86_64.so.1, but keep the cross-gcc in
# cgnutools.
# This will be reached by creating a modified  specs  file in the
# proper location:
export MCGV=$(/cgnutools/bin/gcc  --version | sed 1q | cut -d' ' -f3- )
/cgnutools/bin/${TARGET_TUPLE}-gcc -dumpspecs | sed 's/\/lib\/ld-musl/\/llvmtools\/lib\/ld-musl/g' > /cgnutools/lib/gcc/${TARGET_TUPLE}/$MCGV/specs

# Test the _tools toolchain:
cd $CMLFS/sources
printf "#include <stdio.h>\nint main(){}\n" > dummy.c
${TARGET_TUPLE}-gcc dummy.c
readelf -l a.out | grep ld

# Should output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]
# If matching, clean up:
rm -rf a.out dummy.c

# For future reference, copy log from mussel
cp -v $CMLFS/sources/mussel/log.txt /cgnutools/mussel_build.log
