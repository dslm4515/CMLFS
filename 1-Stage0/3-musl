# llvmtools: Musl libc
# Build as cmlfs

# Configure with freshly built GCC
ARCH=${MCA} CC=${TARGET_TUPLE}-gcc \
CROSS_COMPILE=${TARGET_TUPLE}- \
LIBCC=/cgnutools/lib/gcc/${TARGET_TUPLE}/${MCGV}/libgcc.a \
./configure --host=$TARGET_TUPLE --prefix=/

# Compile
make AR=${TARGET_TUPLE}-ar \
RANLIB=${TARGET_TUPLE}-ranlib

# Install
make AR=${TARGET_TUPLE}-ar \
RANLIB=${TARGET_TUPLE}-ranlib \
DESTDIR=/llvmtools install

# Fix a symlink
rm -v /llvmtools/lib/ld-musl-${MCA}.so.1
ln -sv libc.so /llvmtools/lib/ld-musl-${MCA}.so.1

# Create a symlink that can be used to print
# the required shared objects of a program or
# shared object
mkdir /llvmtools/{etc,bin}
ln -sv ../lib/libc.so /llvmtools/bin/ldd

# Configure the dynamic linker
cat > /llvmtools/etc/ld-musl-${MCA}.path <<EOF
/llvmtools/lib
/llvmtools/${TARGET_TUPLE}/lib
/llvmtools/lib/${TARGET_TUPLE}
EOF

# Test the cgnutools toolchain:
cd $CMLFS/sources
printf "#include <stdio.h>\nint main(){}\n" > dummy.c
${TARGET_TUPLE}-gcc dummy.c
readelf -l a.out | grep ld

# Should output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]
# If matching, clean up:
rm -rf a.out dummy.c
