# cgnutools: stage 0 LLVM -- clang & LLD
# Build as cmlfs

# NOTE: Stage 0 LLVM will be the cross-compiler that can
#       build for both host & target

# NOTE: Reuse source tree from before 

# Set the rpath if GCC is not installed in /usr
export  CFLAGS="-fPIC -Wl,-rpath=/opt/gnu/lib "
export CXXFLAGS=$CFLAGS

# Set the tuples & build target ...
export  CTG="-DLLVM_HOST_TRIPLE=${CMLFS_HOST} "
export CTG+="-DLLVM_TARGET_ARCH=${LARCH} "
export CTG+="-DLLVM_TARGETS_TO_BUILD=Native;${LARCH} "

# Set the paths ...
export  CP="-DCMAKE_INSTALL_PREFIX=/cgnutools "
export CP+="-DDEFAULT_SYSROOT=/cgnutools "

# Set LLVM options: Enable Exception handling and Runtime Type Info
export  CLLVM="-DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON "

# Turn off LLVM options: Turn off features host may have
export  COFF="-DLLVM_ENABLE_ZSTD=OFF -DLLVM_ENABLE_LIBEDIT=OFF "
export COFF+="-DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_LIBEDIT=OFF "
export COFF+="-DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_LIBPFM=OFF "

# Set options for compiler-rt
# + avoid all the optional runtimes:
export  CRT="-DCOMPILER_RT_BUILD_SANITIZERS=OFF "
export CRT+="-DCOMPILER_RT_BUILD_XRAY=OFF "
export CRT+="-DCOMPILER_RT_BUILD_LIBFUZZER=OFF "
export CRT+="-DCOMPILER_RT_BUILD_PROFILE=OFF "
export CRT+="-DCOMPILER_RT_BUILD_MEMPROF=OFF "
# + Avoid need for libexecinfo:
export CRT+="-DCOMPILER_RT_BUILD_GWP_ASAN=OFF "
export CRT+="-DCOMPILER_RT_USE_LLVM_UNWINDER=ON "
export CRT+="-DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF "

# Set options fo libc++abi
export  CLCPPA="-DLIBCXXABI_USE_LLVM_UNWINDER=ON "
export CLCPPA+="-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON "
export CLCPPA+="-DLIBCXXABI_USE_COMPILER_RT=OFF "

# Set options for libc++
export  CLCPP="-DLIBCXX_HAS_MUSL_LIBC=ON "
export CLCPP+="-DLIBCXX_ENABLE_LOCALIZATION=ON "
export CLCPP+="-DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=ON "
export CLCPP+="-DLIBCXX_CXX_ABI=libcxxabi "
export CLCPP+="-DLIBCXX_USE_COMPILER_RT=OFF "
export CLCPP+="-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON "
export CLCPP+="-DLIBCXX_ENABLE_ASSERTIONS=ON "

# Now configure stage 0 LLVM with host's GCC
# NOTE: Add path if GCC is not installed in /usr
PATH=/opt/gnu/bin:/bin \
CC=gcc CXX=g++ \
cmake -B build0  -G Ninja -Wno-dev -S llvm -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt" -DCLANG_VENDOR="cgnutools 4.0.1" \
      -DLLVM_INCLUDE_TESTS=OFF -DLIBCLANG_BUILD_STATIC=ON $CP $CLLVM $COFF $CTG $CRT  \
      -DLLVM_DEFAULT_TARGET_TRIPLE="$TARGET_TUPLE" \
      -DLLVM_TABLEGEN=/cgnutools/bin/llvm-tblgen \
      -DCLANG_TABLEGEN=/cgnutools/bin/clang-tblgen

# Build ... but no compiler-rt built
PATH=/opt/gnu/bin:/bin  ninja -C build0

# Install to cgnutools 
cmake --install build0 --strip

##############################################################################################
# Rebuild but add compiler-rt
PATH=/opt/gnu/bin:/bin \
CC=gcc CXX=g++ \
cmake -B build0  -G Ninja -Wno-dev -S llvm -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ENABLE_PROJECTS="clang;lld" -DCLANG_VENDOR="cgnutools 4.0.1" \
      -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind;compiler-rt"  \
      -DLLVM_INCLUDE_TESTS=OFF -DLIBCLANG_BUILD_STATIC=ON $CP $CLLVM $COFF $CTG $CRT $CLCPPA $CLCPP \
      -DLLVM_DEFAULT_TARGET_TRIPLE="$TARGET_TUPLE" \
      -DLLVM_TABLEGEN=/cgnutools/bin/llvm-tblgen \
      -DCLANG_TABLEGEN=/cgnutools/bin/clang-tblgen

# Compile just compiler-rt
PATH=/opt/gnu/bin:/bin ninja -C build0 compiler-rt 
# Fails:
# <built-in>:1:10: fatal error: 'stdc-predef.h' file not found

# Install compiler-rt
PATH=/opt/gnu/bin:/bin ninja -C build0 install-compiler-rt-headers-stripped
PATH=/opt/gnu/bin:/bin ninja -C build0 install-compiler-rt-stripped
###################################################################################################

# Install llvm-lit script for buidling standalone LLVM projects
cp -va build0/bin/llvm-lit /cgnutools/bin/

# Make sure target CPU arch is supported by stage 0 clang
clang -print-targets

# For X86:
# x86    - 32-bit X86: Pentium-Pro and above
# x86-64 - 64-bit X86: EM64T and AMD64
#
# For AArch64(arm64)
# aarch64    - AArch64 (little endian)
# aarch64_32 - AArch64 (little endian ILP32)
# aarch64_be - AArch64 (big endian)
# arm64      - ARM64 (little endian)
# arm64_32   - ARM64 (little endian ILP32) 
