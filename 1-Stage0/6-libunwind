# cgnutools: libunwind
# Build as cmlfs
#
# o Use patches from Chimera Linux
# o build libunwind as building stage0 clang requires it
# o Use the monorepo source, i.e llvm-project-x.x.x.tar.xz

# Source tree will be reused later. Apply patches from Chimera Linux
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0001-llvm-always-set-a-larger-stack-size-explicitly.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0002-llvm-musl-workarounds.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0003-llvm-fix-some-MF_EXEC-related-test-failures-on-aarch.patch
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0004-llvm-disable-dependency-on-libexecinfo-everywhere.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0005-compiler-rt-ppc-sanitizer-fixes.patch
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0006-compiler-rt-default-to-libc-for-sanitizers.patch
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0007-compiler-rt-build-crt-in-runtimes-build.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0008-compiler-rt-lsan-basic-musl-fixes-on-various-archs.patch
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0009-compiler-rt-HACK-hwasan-build-on-x86_64.patch
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0010-compiler-rt-libcxx-abi-libunwind-HACK-force-fno-lto.patch
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0011-compiler-rt-HACK-always-compile-in-gcc_personality_v.patch
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0012-libc-libc-abi-libunwind-disable-multiarch-locations.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0013-libc-musl-locale-workarounds.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0014-clang-disable-multiarch-layout-on-musl.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0015-clang-drop-incorrect-warning-about-vector-equality-r.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0016-clang-add-fortify-include-paths-for-musl-triplets-en.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0017-clang-use-as-needed-by-default.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0018-clang-switch-on-default-now-relro.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0019-clang-default-to-fno-semantic-interposition.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0020-clang-implicitly-link-to-libatomic-on-linux-targets.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0021-clang-use-strong-stack-protector-by-default.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0022-clang-fix-unwind-chain-inclusion.patch
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0023-Add-accessors-for-MCSubtargetInfo-CPU-and-Feature-ta.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0024-clang-link-libcxxabi-on-linux-when-using-libc.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/0025-Get-rid-of-spurious-trailing-space-in-__clang_versio.patch 
patch -Np1 -i ../patches/llvm-17.0.5-chimera/ifunc-fail-if-not-supported.patch 

# For llvm-17.0.6, additional patches:
patch -Np1 -i ../patches/llvm-17.0.6-chimera/libcpp-pointer-traits-sfinae.patch
patch -Np1 -i ../patches/llvm-17.0.6-chimera/stdc-predef-preinclude.patch 
patch -Np1 -i ../patches/llvm-17.0.6-chimera/string-sso-constant.patch  

# Musl doesn't support strtoll_l(), so replace it with a simple strtoll() call.
# Apply patches to allow localization of libc++:
#patch -Np1 -i ../patches/llvm1506-cmlfs/libcxx-use-strtoll_strtoul.patch

# Force 'abi' changes (glibc->musl) to source and disable xlocale.h (holds abi changes).
#patch -Np1 -i ../patches/llvm1506-cmlfs/remove-locale-inlines.patch

# Since, libunwind is for cgnutools, modify the cross-gcc specs to set the dynamic
# loader as  /cgnutools/lib/ld-musl-${MCA}.so.1
export MCGV=$(/cgnutools/bin/${TARGET_TUPLE}-gcc  --version | sed 1q | cut -d' ' -f3- )
/cgnutools/bin/${TARGET_TUPLE}-gcc -dumpspecs | sed 's/\/lib\/ld-musl/\/cgnutools\/lib\/ld-musl/g' > /cgnutools/lib/gcc/${TARGET_TUPLE}/$MCGV/specs

export CFLAGS="-fPIC "
export CXXFLAGS=$CFLAGS

# Set the compiler and linker flags...
export LINKERFLAGS="-Wl,-rpath=/cgnutools/lib "
export  CT="-DCMAKE_C_COMPILER=${TARGET_TUPLE}-gcc "
export CT+="-DCMAKE_CXX_COMPILER=${TARGET_TUPLE}-g++ "
export CT+="-DCMAKE_AR=/cgnutools/bin/${TARGET_TUPLE}-ar "
export CT+="-DCMAKE_NM=/cgnutools/bin/${TARGET_TUPLE}-nm "
export CT+="-DCMAKE_RANLIB=/cgnutools/bin/${TARGET_TUPLE}-ranlib "

# Configure source in a build directory
cmake -G Ninja -B build -S libunwind -Wno-dev \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/cgnutools \
      -DCMAKE_INSTALL_OLDINCLUDEDIR=/cgnutools/include \
      -DCMAKE_EXE_LINKER_FLAGS="${LINKERFLAGS}" \
      -DCMAKE_SHARED_LINKER_FLAGS="${LINKERFLAGS}" \
      -DLIBUNWIND_INSTALL_HEADERS=ON \
      -DLIBUNWIND_ENABLE_CROSS_UNWINDING=ON \
      -DLIBUNWIND_ENABLE_STATIC=ON \
      -DLIBUNWIND_HIDE_SYMBOLS=ON $CT

# compile
ninja -C build unwind

# install to cgnutools
ninja -C build install-unwind-stripped

# Built libunwind.so will have unresolved symbols:
# $ ldd /cgnutools/lib/libunwind.so.1.0
# 	ldd (0x7fa2a96fb000)
# 	libc.so => ldd (0x7fa2a96fb000
# 	libgcc_s.so.1 => /cgnutools/lib/libgcc_s.so.1 (0x7fa2a96bf000)
# Error relocating build/lib/libunwind.so.1.0: __unw_getcontext: symbol not found
# Error relocating build/lib/libunwind.so.1.0: __libunwind_Registers_x86_64_jumpto: symbol not found
# 
# This will not be a problem

# Remove build directory & clear flags
# Do not remove source tree as it will be used later
rm -rf build
unset CXXFLAGS CFLAGS CT LINKERFLAGS

# Set the cross-gcc spec to set the dynamic loader as
# /llvmtools/lib/ld-musl-${MCA}.so.1
/cgnutools/bin/${TARGET_TUPLE}-gcc -dumpspecs | sed 's/\/lib\/ld-musl/\/llvmtools\/lib\/ld-musl/g' > /cgnutools/lib/gcc/${TARGET_TUPLE}/$MCGV/specs
