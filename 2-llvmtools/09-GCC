# Llvmtools Chain: GCC
# Build and install as cmlfs

# Additional sources to add as GCC requires them 
xz -cd ../pkgs/mpfr-4.1.1.tar.xz | tar -xf -
mv -v mpfr-4.1.1 mpfr
xz -cd ../pkgs/gmp-6.2.1.tar.xz | tar -xf -
mv -v gmp-6.2.1 gmp
gunzip -cd ../pkgs/mpc-1.2.1.tar.gz | tar -xf -
mv -v mpc-1.2.1 mpc

# Apply patches [from Glaucus]
patch -Np0 -i ../patches/glaucus/0001-pure64-for-x86-64.patch 

# The target build is finding the host libstdc++'s <fenv.h>, fix it
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100017#c7
patch -Np1 -i ../patches/gcc-mlfs-11.2.0/fix_fenv_header.patch

# Re-create internal header
cat gcc/{limitx,glimits,limity}.h > \
  $(dirname $($CMLFS_TARGET-gcc -print-libgcc-file-name))/include-fixed/limits.h

# change the location of GCC's default dynamic linker to use the one installed in /llvmtools
#
# For i686/x86_64:
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/llvmtools&@g' \
      -e 's@/usr@/llvmtools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/llvmtools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

# Configure in dedicated build directory
mkdir -v build && cd build

# Set build options:
export  CARGS="--target=${CMLFS_TARGET}  "
export CARGS+="--build=${CMLFS_TARGET} "
export CARGS+="--host=${CMLFS_HOST} "
#export  CARGS="--target=${TARGET_TUPLE}  "
#export CARGS+="--build=${TARGET_TUPLE} "
#export CARGS+="--host=${CMLFS_TARGET} "
export CARGS+="--prefix=/llvmtools "
export CARGS+="--with-local-prefix=/llvmtools "
export CARGS+="--with-native-system-header-dir=/llvmtools/include "

# Enable only C++ and C languages
export CARGS+="--enable-languages=c,c++ "

# Disable features not supported by Musl 
export CARGS+="--disable-libsanitizer "
export CARGS+="--disable-symvers "

# Disable features not needed during chroot
export CARGS+="--disable-libssp "
export CARGS+="--disable-libvtv "
export CARGS+="--disable-libitm "
export CARGS+="--disable-libgomp "
export CARGS+="--disable-multilib "
export CARGS+="--disable-bootstrap "
export CARGS+="--disable-libquadmath "
export CARGS+="--disable-libstdcxx-pch "

# Missing cc: create a link, otherwise build will use host's
ln -sv x86_64-cmlfs-linux-musl-gcc /cgnutools/bin/cc

# GCC can only be compiled by GCC
# Configure source
CC="${CMLFS_TARGET}-gcc"    \
CXX="${CMLFS_TARGET}-g++"   \
AR="${CMLFS_TARGET}-ar"     \
AS="${CMLFS_TARGET}-as"     \
RANLIB="${CMLFS_TARGET}-ranlib"     \
LD="${CMLFS_TARGET}-ld"             \
STRIP="${CMLFS_TARGET}-strip"       \
CC_FOR_BUILD="${CMLFS_TARGET}-gcc"  \
CXX_FOR_BUILD="${CMLFS_TARGET}-g++" \
CFLAGS='-g0 -O0 ' \
CXXFLAGS=$CFLAGS \
../configure $CARGS --with-arch=${CMLFS_CPU}   

# Build will look for headers & libraries in /llvmtools/${TARGET_TUPLE} ... made by binutils:
#ln -sv ../include  /llvmtools/x86_64-pc-linux-musl/include
#mv /llvmtools/x86_64-pc-linux-musl/lib/ldscripts /llvmtools/lib/
#ln -sv ../lib /llvmtools/x86_64-pc-linux-musl/lib 

# Build - Set the PATHs for binaries and PATHs for libraries
PATH=/llvmtools/bin:/cgnutools/bin:/usr/bin:/bin \
LD_LIBRARY_PATH=/llvmtools/lib:/cgnutools/x86_64-cmlfs-linux-musl/lib:/cgnutools/lib:/usr/lib:/lib \
make   

# Install
make install

# FAIL: no gcc binary built/installed in /llvmtools. 

# Add library path to llvmtools dynamic linker
echo "/llvmtools/x86_64-cmlfs-linux-musl/lib" >> /llvmtools/etc/ld-musl-x86_64.path

# Re-create internal header for GCC installed in llvmtools/gnu since
# the internal header that has just been installed is a partial, 
# self-contained file and does not include the extended features of the system header
cp -v /llvmtools/lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/include-fixed/limits.h \
      /llvmtools/lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/include-fixed/limits.h.old
cat ../gcc/limitx.h ../gcc/glimits.h ../gcc/limity.h > \
    /llvmtools/lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/include-fixed/limits.h

# Make clang the primary compiler system
for b in gcc cpp g++ c++
do
  mv -v /llvmtools/bin/{$b,$b.gnu}
  ln -sv clang-12 /llvmtools/bin/$b
done

# Many programs and scripts run cc instead of gcc, provide a link
ln -sv clang-12 /llvmtools/bin/cc

# Some packages are hard coded to use GCC . Create script 
# to set GCC as system compiler
cat > /llvmtools/bin/set-gcc-mode << "EOF"
#! /bin/bash
echo "[ 1 / 1 ] Setting GCC as system compiler..." && \
for b in c++ cpp g++ gcc
do
  rm -v          /llvmtools/bin/$b
  ln -sv $b.gnu  /llvmtools/bin/$b
done
rm -v /llvmtools/lib/cpp
rm -v /llvmtools/bin/cc
ln -sv ../llvmtools/bin/cpp.gnu /llvmtools/lib/cpp
ln -sv gcc.gnu   /llvmtools/bin/cc
EOF
chmod -v +x /llvmtools/bin/set-gcc-mode

# Can't remember why this was done
#GCC_INCLUDEDIR=`dirname $(${CMLFS_TARGET}-gcc -print-libgcc-file-name)`/include &&
#find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &&
#rm -vf `grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*` &&
#unset GCC_INCLUDEDIR

# Test GCC portion of the toolchain
echo 'int main(){}' > dummy.c &&
/llvmtools/bin/gcc.gnu dummy.c
readelf -l a.out | grep ': /llvmtools'

# Should output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]

# If all is well, remove the test files
rm -v dummy.c a.out
