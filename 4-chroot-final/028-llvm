# Final System: LLVM
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/llvm-12.0.0.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/clang-12.0.0.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/compiler-rt-12.0.0.src.tar.xz
# Source: https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/lld-12.0.0.src.tar.xz 
#
# This section is done in Chroot environment

cd ${LLVMSRC}

# Make sure clang & lld are unpacked in tools
# and compiler-rt in projects
tar xf ../pkgs/compiler-rt-12.0.0.src.tar.xz 
mv compiler-rt-12.0.0.src projects/compiler-rt
tar xf ../pkgs/clang-12.0.0.src.tar.xz 
tar xf ../pkgs/lld-12.0.0.src.tar.xz
mv clang-12.0.0.src tools/clang
mv lld-12.0.0.src   tools/lld

# Apply patches from Void Linux
cd ${LLVMSRC}/projects/compiler-rt
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-aarch64-ucontext.patch
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-sanitizer-ppc64-musl.patch
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-size_t.patch
patch -Np1 -i ../../../patches/llvm12-compiler-rt-void/compiler-rt-xray-ppc64-musl.patch
cd ${LLVMSRC}/tools/clang
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-001-fix-unwind-chain-inclusion.patch
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-002-add-musl-triples.patch
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-003-ppc64-dynamic-linker-path.patch
patch -Np1 -i ../../../patches/llvm12-clang-void/clang-004-ppc64-musl-elfv2.patch
cd ${LLVMSRC}
patch  -Np1 -i ../patches/llvm12-void/llvm-001-musl.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-002-musl-ppc64-elfv2.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-003-ppc-secureplt.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-004-override-opt.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-005-ppc-bigpic.patch
patch  -Np1 -i ../patches/llvm12-void/llvm-006-aarch64-mf_exec.patch

# Disable sanitizers for musl systems, per Void Linux... fixes early build failure
sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' projects/compiler-rt/cmake/config-ix.cmake

# Fix missing header for lld, https://bugs.llvm.org/show_bug.cgi?id=49228
tar xf ../pkgs/libunwind-12.0.0.src.tar.xz libunwind-12.0.0.src/include/mach-o/compact_unwind_encoding.h
mv libunwind-12.0.0.src/include/mach-o tools/lld/include/
rm -rf libunwind-12.0.0.src

# Vastly reduce size of debugging symbols:
export CFLAGS=" -g -g1"
export CXXFLAGS=" -g -g1"

# Set the build
export  CONFIG_BUILD="-DCMAKE_AR=/llvmtools/bin/llvm-ar "   
export CONFIG_BUILD+="-DCMAKE_LINKER=/llvmtools/bin/ld.lld " 
export CONFIG_BUILD+="-DCMAKE_NM=/llvmtools/bin/llvm-nm " 
export CONFIG_BUILD+="-DCMAKE_OBJCOPY=/llvmtools/bin/llvm-objcopy "
export CONFIG_BUILD+="-DCMAKE_OBJDUMP=/llvmtools/bin/llvm-objdump " 
export CONFIG_BUILD+="-DCMAKE_RANLIB=/llvmtools/bin/llvm-ranlib " 
export CONFIG_BUILD+="-DCMAKE_READELF=/llvmtools/bin/llvm-readelf " 
export CONFIG_BUILD+="-DCMAKE_STRIP=/llvmtools/bin/llvm-strip " 

# Set the LLVM features
export  CONFIG_LLVM="-DLLVM_LINK_LLVM_DYLIB=ON -DLLVM_BUILD_LLVM_DYLIB=ON "
export CONFIG_LLVM+="-DLLVM_ENABLE_LIBCXX=ON   -DLLVM_ENABLE_LLD=ON "
export CONFIG_LLVM+="-DLLVM_ENABLE_RTTI=ON     -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON "
export CONFIG_LLVM+="-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON  -DLLVM_INSTALL_UTILS=ON "

# Turn off features and options not needed
export  CONFIG_OFF="-DLLVM_BUILD_TESTS=OFF        -DLLVM_ENABLE_LIBEDIT=OFF "
export CONFIG_OFF+="-DLLVM_ENABLE_LIBXML2=OFF     -DLLVM_INCLUDE_GO_TESTS=OFF "
export CONFIG_OFF+="-DLLVM_INCLUDE_DOCS=OFF       -DLLVM_INCLUDE_EXAMPLES=OFF "
export CONFIG_OFF+="-DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_UNWIND_TABLES=OFF "
export CONFIG_OFF+="-DLLVM_ENABLE_IDE=OFF         -DLLVM_ENABLE_BINDINGS=OFF "
export CONFIG_OFF+="-DLLVM_ENABLE_OCAMLDOC=OFF    -DLLVM_ENABLE_IDE=OFF "
export CONFIG_OFF+="-DLLVM_ENABLE_ZLIB=OFF "

# Set options for clang
export  CONFIG_CLANG="-DCLANG_DEFAULT_CXX_STDLIB=libc++ "
export CONFIG_CLANG+="-DCLANG_DEFAULT_UNWINDLIB=libunwind "
export CONFIG_CLANG+="-DCLANG_DEFAULT_RTLIB=compiler-rt "
export CONFIG_CLANG+="-DCLANG_DEFAULT_LINKER=/usr/bin/ld.lld "

# Set some paths
export  CONFIG_PATH="-DBacktrace_INCLUDE_DIR=/usr/include " 
export CONFIG_PATH+="-DBacktrace_LIBRARY=/usr/lib/libexecinfo.so " 
export CONFIG_PATH+="-DCMAKE_INSTALL_OLDINCLUDEDIR=/usr/include " 
export CONFIG_PATH+="-DICONV_LIBRARY_PATH=/usr/lib/libc.so " 

# Set options for compiler-rt
export CONFIG_CRT="-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_SANITIZERS=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_PROFILE=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_XRAY=OFF "
export CONFIG_CRT+="-DCOMPILER_RT_BUILD_LIBFUZZER=OFF " 

# More options to turn off, may reduce up to 200 less
# targets to build
export  CONFIG_NOEXTRA="-DCLANG_ENABLE_ARCMT=OFF "
export CONFIG_NOEXTRA+="-DCLANG_ENABLE_STATIC_ANALYZER=OFF "
export CONFIG_NOEXTRA+="-DCLANG_INCLUDE_TESTS=OFF "
export CONFIG_NOEXTRA+="-DCLANG_INSTALL_SCANBUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_INSTALL_SCANVIEW=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_APINOTES_TEST_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_ARCMT_TEST_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_CLANG_FUZZER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_CLANG_OFFLOAD_WRAPPER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_CLANG_REFACTOR_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_DIAGTOOL_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_SCAN_BUILD_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCLANG_TOOL_SCAN_VIEW_BUILD=OFF "
export CONFIG_NOEXTRA+="-DCOMPILER_RT_CAN_EXECUTE_TESTS=OFF "
export CONFIG_NOEXTRA+="-DCOMPILER_RT_INCLUDE_TESTS=OFF "

export CONFIG_NOEXTRA+="-DLLVM_INCLUDE_TESTS=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_BUGPOINT_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_BUGPOINT_PASSES_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_BCANALYZER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_EXEGESIS_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_GO_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_OPT_REPORT_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_LIBTOOL_DARWIN_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_XCODE_TOOLCHAIN_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_VFABI_DEMANGLE_FUZZER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_OPT_VIEWER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_XRAY_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_SPECIAL_CASE_LIST_FUZZER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_PDBUTIL_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_YAML_NUMERIC_PARSER_FUZZER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_LLVM_YAML_PARSER_FUZZER_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_YAML2OBJ_BUILD=OFF "
export CONFIG_NOEXTRA+="-DLLVM_TOOL_OBJ2YAML_BUILD=OFF "

cmake -B build -G Ninja \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/usr \
      -DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl \
      -DLLVM_HOST_TRIPLE="x86_64-pc-linux-musl" \
      -DLLVM_TARGET_ARCH="X86" \
      -DLLVM_TARGETS_TO_BUILD="host;BPF;AMDGPU;X86" \
      -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-musl" \
      -DDEFAULT_SYSROOT="/usr" \
      ${CONFIG_BUILD} ${CONFIG_LLVM} ${CONFIG_OFF} ${CONFIG_NOEXTRA} \
      ${CONFIG_CLANG} ${CONFIG_PATH} ${CONFIG_CRT} -Wno-dev

unset CONFIG_BUILD CONFIG_LLVM CONFIG_OFF CONFIG_CLANG CONFIG_PATH CONFIG_CRT

# Build
ninja -C build

# Install
cd build && \
cmake -DCMAKE_INSTALL_PREFIX="/usr" -P cmake_install.cmake
cd -

# Install additional binaries that where built, but not installed by ninja -C build install:
#cp -vn build/bin/* /usr/bin/

# Unset these flags
unset CFLAGS CXXFLAGS CC CXX

# Set lld as default system linker
ln -sv lld /usr/bin/ld

# Create a link for packages that look for an as[seembler]
#ln -sv llvm-as /usr/bin/as

# Many packages use the name cc to call the C compiler. To 
# satisfy those packages, create a symlink
ln -sv clang-12 /usr/bin/cc

# Create a symlink required by the FHS for "historical" reasons
ln -sv ../usr/bin/clang-12 /lib/cpp

# Build useful utilities.. according to Adelie Linux, these are for BSD-Compatibility.
# It may be done seperately as a package in the future. 
cc -fpie ../files/musl/getent.c -o getent
cc -fpie ../files/musl/getconf.c -o getconf
cc -fpie ../files/musl/iconv.c -o iconv

install -v -D -m755  getent  /usr/bin/
install -v -D -m755  getconf /usr/bin/
install -v -D -m755  iconv   /usr/bin/
install -v -D -m644  ../files/musl/getent.1   /usr/share/man/man1/
install -v -D -m644  ../files/musl/getconf.1  /usr/share/man/man1/

# Create script to switch system between LLVM and binutils
# since some packages are hard coded.
cat > /usr/bin/set-llvm-bin-mode << "EOF"
#! /bin/bash
echo "[ 1 / 2 ] Clearing links..."  && \
for b in ar as dwp nm objcopy objdump size strings addr2line c++filt ranlib readelf strip
do
  rm -v /usr/bin/$b
done                      && \
echo "[ 2 / 2 ] Setting LLVM as system binary tools..." && \
for b in ar as dwp nm objcopy objdump size strings 
do
  ln -sv llvm-$b /usr/bin/$b
done                                          && \
ln -sv llvm-symbolizer /usr/bin/addr2line     && \
ln -sv llvm-cxxfilt    /usr/bin/c++filt       && \
ln -sv llvm-ar         /usr/bin/ranlib        && \
ln -sv llvm-readobj    /usr/bin/readelf       && \
ln -sv llvm-objcopy    /usr/bin/strip         && \
echo "[ info  ] LLVM Binary tools set as system default"
EOF

# Some packages are hard coded to use GCC . Create script 
# to set clang/LLVM as system compiler
cat > /usr/bin/set-llvm-mode << "EOF"
#! /bin/bash
echo "[ 1 / 1 ] Setting LLVM as system compiler..." && \
for b in c++ cpp g++ gcc cc
do
  rm -v  /usr/bin/$b
  ln -sv clang-12  /usr/bin/$b
done
rm -v /lib/cpp
ln -sv ../usr/bin/clang-12 /lib/cpp
EOF

# set scripts permission
chmod -v +x /usr/bin/set-llvm-mode
chmod -v +x /usr/bin/set-llvm-bin-mode

# Test final system's toolchain:
echo 'int main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
# Should output:
# [Requesting program interpreter: /lib/ld-musl-x86_64.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-i386.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-arm.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-aarch64.so.1]

grep 'ld.lld:' dummy.log | grep 'crt[1in]'
#ld.lld: /usr/lib/Scrt1.o
#ld.lld: /usr/lib/crti.o
#ld.lld: /usr/lib/crtn.o

# Verify that the compiler is searching for the correct 
# header files: 
grep -B1 '^ /usr/include' dummy.log
# Should output:
# #include <...> search starts here:
# /usr/include

# Verify that the new linker is being used with the 
# correct search paths: 
grep -o -- -L/usr/lib dummy.log 
#-L/usr/lib

# Once everything is working correctly, clean up 
# the test files:
rm -v dummy.c a.out dummy.log
