# Final System: GCC (optional)
# This section is done in Chroot environment

# GCC source tarball is a snapshot from Alpine Linux
# **Installing GCC is optional as most packages can be built with clang.**

case $(uname -m) in
  x86_64) export TUPLE="x86_64-linux-musl"
          export EXTRA_CONFIG=" --with-arch=x86-64"
          ;;
  i686)   export TUPLE="i686-linux-musl"
          export EXTRA_CONFIG=" --with-arch=pentium3 --with-tune=pentium-m"
          ;;
  armv7l) export TUPLE="armv7l-linux-musleabihf"
          export EXTRA_CONFIG=" --with-arch=armv7-a --with-tune=generic-armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-abi=aapcs-linux --with-mode=thumb"
          ;;
  armv6l) export TUPLE="armv6l-linux-musleabihf"
          export EXTRA_CONFIG=" --with-arch=armv6zk --with-tune=arm1176jzf-s --with-fpu=vfp --with-float=hard --with-abi=aapcs-linux"
          ;;
  aarch64) export TUPLE="aarch64-linux-musleabihf"
           export EXTRA_CONFIG=" --with-arch=armv8-a --with-abi=lp64 --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419"
           sed -i '/m64=/s/lib64/lib/' gcc/config/aarch64/t-aarch64-linux
          ;;
esac &&

case $(uname -m) in
     arm*) export LIBITM=false ;;
esac &&

tar -xf ../pkgs/isl-0.23.tar.bz2 &&
mv -v isl-0.23 isl         &&

# Apply patches from Alpine Linux
bash ../patches/gcc-10.3.1_git20210424-alpine/apply_patches.sh

case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
  aarch64)
    sed -e '/mabi.lp64=/s/lib64/lib/' \
        -i.orig gcc/config/aarch64/t-aarch64-linux
  ;;
esac &&

# Change compilers, use GCC of llvmtools
/llvmtools/bin/set-gcc-mode

# Change binary tools for llvmtools to Binutils
/llvmtools/bin/set-gnu-bin-mode

# Use system installed binutils
/usr/bin/set-gnu-bin-mode

# Build in a dedicated directory
mkdir -v build && cd build

# Configure source
CC=gcc.gnu   \
CXX=g++.gnu \
SED=sed  libat_cv_have_ifunc=no       \
../configure --prefix=/usr            \
             --build="${TUPLE}"\
             --with-system-zlib       \
             --with-isl \
             --with-linker-hash-style=gnu \
             --enable-languages=c,c++ \
             --enable-threads=posix \
             --enable-clocale=generic \
             --enable-tls \
             --enable-libstdcxx-time \
             --enable-fully-dynamic-string \
             --enable-default-pie \
             --enable-default-ssp \
             --enable-linker-build-id \
	     --enable-checking=release \
	     --enable-cloog-backend \
	     --enable-__cxa_atexit  \
	     --enable-lto \
	     --enable-plugins \
             --disable-libstdcxx-pch \
             --disable-nls \
             --disable-multilib       \
             --disable-bootstrap      \
             --disable-symvers \
             --disable-libsanitizer \
             --disable-libssp \
	     --disable-libmpx \
             --disable-libmudflap \
	     --disable-fixed-point \
	     --disable-sjlj-exceptions \
	     --disable-werror $EXTRA_CONFIG \
             --with-pkgversion="CMLFS 2.0.0"

# Compile
make 

# Install!
make install

# Make clang the primary compiler system
for b in gcc cpp g++ c++
do
  mv -v /usr/bin/{$b,$b.gnu}
  ln -sv clang-12 /usr/bin/$b
done  

# Create a symlink required by the FHS for 'historical' reasons
ln -sv ../bin/cpp.gnu /usr/lib/cpp

# Many packages use the name cc to call the C compiler. Satisfy
# those pacakges with a symlink:
ln -sv gcc.gnu /usr/bin/cc

# Some packages are hard coded to use GCC . Create script 
# to set GCC as system compiler
cat > /usr/bin/set-gcc-mode << "EOF"
#! /bin/bash
echo "[ 1 / 1 ] Setting GCC as system compiler..." && \
for b in c++ cpp g++ gcc 
do
  rm -v          /usr/bin/$b
  ln -sv $b.gnu  /usr/bin/$b
done
rm -v /lib/cpp
rm -v /usr/bin/cc
ln -sv ../usr/bin/cpp.gnu /lib/cpp
ln -sv gcc.gnu   /usr/bin/cc
EOF
chmod -v +x /usr/bin/set-gcc-mode

# Create a compatibility symlink to enable building programs with
# LTO (Link Time Optimization)
install -v -dm755 /usr/lib/bfd-plugins
ln -sv  ../../libexec/gcc/x86_64-pc-linux-musl/10.3.1/liblto_plugin.so \
        /usr/lib/bfd-plugins/
mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

# Set toolchain compiler back as LLVM
/llvmtools/bin/set-llvm-mode

# Set toolchain binary tools back to LLVM
/llvmtools/bin/set-llvm-bin-mode

# Set system binary tools back to LLVM
for b in ar as nm objcopy objdump size strings addr2line ranlib readelf strip
do
 rm -v /usr/bin/$b
done
for b in ar as nm objcopy objdump size strings
do 
  ln -sv /llvmtools/bin/llvm-$b /usr/bin/$b
done
ln -sv /llvmtools/bin/llvm-symbolizer /usr/bin/addr2line     && \
ln -sv /llvmtools/bin/llvm-ar         /usr/bin/ranlib        && \
ln -sv /llvmtools/bin/llvm-readobj    /usr/bin/readelf       && \
ln -sv /llvmtools/bin/llvm-objcopy    /usr/bin/strip      
   
