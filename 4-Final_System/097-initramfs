# Final System: initramfs
# This section is done in Chroot environment

# Unpack busybox source
tar xf pkgs/busybox-1.36.1.tar.bz2
cd busybox-1.36.1

# Copy over config
cp -v ../files/busybox-initramfs.config .config

# Check for any unresolved [config] symbols
PATH=$PATH:/opt/gnu/bin make oldconfig

# Compile busybox
PATH=$PATH:/opt/gnu/bin make 

# Create a directory to hold the contents of
# the initramfs
mkdir -pv /sources/initramfs_build

# Enter directory and create a base 
# directory tree:
cd /sources/initramfs_build
mkdir -pv dev etc lib proc run sbin sys mnt/root
mkdir -pv lib/{firmware,modules}
mkdir -pv etc/modprobe.d
mkdir -pv usr

# Create symlinks
ln -sv lib lib64
ln -sv sbin bin
ln -sv ../sbin usr/bin
ln -sv ../sbin usr/sbin

# Create directories for CPU microcode
mkdir -pv kernel/x86/microcode

# Copy busybox
cp -v /sources/busybox-1.36.1/busybox bin/

# Create symlinks to busybox
for b in cat cp dd killall kmod ln ls mkdir \
         mknod mount rm sed sh sleep umount uname \
         basename readlink insmod lsmod mdev \
         switch_root findfs 
do 
  ln -sv  busybox bin/$b
done

# Create the nodes for mdev to mount on:
mknod -m 600 dev/console c 5 1
mknod -m 666 dev/null c 1 3

# Set module load order, if needed
touch etc/modprobe.d/modprobe.conf 

# Create the init script
cat > bin/init << "EOF"
#!/bin/busybox sh

# simple cmdline parser function
cmdline() {
    local value
    value=" $(cat /proc/cmdline) "
    value="${value##* ${1}=}"
    value="${value%% *}"
    [ "${value}" != "" ] && echo "${value}"
}

# execute rescue shell if an error occurs
rescue_shell() {
    echo "Something went wrong. Dropping to a shell."
    exec sh
}

# Mount the /proc and /sys filesystems.
mount -t proc none /proc
mount -t sysfs none /sys

# Start mdev
echo /bin/mdev > /proc/sys/kernel/hotplug
mdev -s

# Mount the root filesystem.
mount -o ro $(findfs $(cmdline root)) /mnt/root || rescue_shell

# Clean up.
#umount /proc
#umount /sys

# stop mdev
killall -w mdev

# Boot the real system
exec switch_root /mnt/root /sbin/init
EOF

ln -sv sbin/init init

# Make sure init script is executable
chmod -v a+x bin/init

# Copy any firmware required for boot:
cp -rv /lib/firmware/* lib/firmware/

# Copy any kernel modules:
cp -rv /lib/modules/* lib/modules/

# Now create the initramfs image. Do not change directories
find . | bsdcpio -o -H newc | gzip -9  > /boot/initrd.img

# If desired and/or available, create img for CPU microcode
#
mkdir -pv /sources/microcode_build/kernel/x86/microcode
cd /sources/microcode_build

# For AMD:
cat /usr/lib/firmware/amd-ucode/microcode_amd*.bin > kernel/x86/microcode/AuthenticAMD.bin

# For Intel:
cat /usr/lib/firmware/intel-ucode/* > kernel/x86/microcode/GenuineIntel.bin

# Create the microcode img:
find . | bsdcpio -o -H newc --quiet ) > /boot/microcode.img

# if desired, combine both microcode.img and initrd.img into a single image
mv /boot/initrd.img /boot/initramfs.img
cat /boot/microcode.img /boot/initramfs.img > /boot/initrd.img
