# cgnutools: LLVM clang
#
# Build as cmlfs
#
# Reused unpacked LLVM source from building LLVM runtimes

# Set cxxflags for cross-gcc to build clang with the 
# just built LLVM runtimes

# Set the compiler and linker flags...
export LINKERFLAGS="-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1"
export  CTOOLS="-DCMAKE_C_COMPILER=${CMLFS_TARGET}-gcc "
export CTOOLS+="-DCMAKE_CXX_COMPILER=${CMLFS_TARGET}-g++ "
export CTOOLS+="-DCLANG_DEFAULT_LINKER=/cgnutools/bin/ld.lld "

# Set the tuples & build target .
# Using vendor pc instead of CMLFS since clang is the last
# tool to build for cgnutools
export  CTARG="-DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl " 
export CTARG+="-DLLVM_HOST_TRIPLE=x86_64-pc-linux-musl " 
export CTARG+="-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl " 
export CTARG+="-DLLVM_TARGETS_TO_BUILD=X86 "
export CTARG+="-DLLVM_TARGET_ARCH=X86 "
export CTARG+="-DLLVM_TARGETS_TO_BUILD=Native "

# Set the paths ...
export  CPATHS="-DCMAKE_INSTALL_PREFIX=/cgnutools "
export CPATHS+="-DDEFAULT_SYSROOT=/cgnutools "
export CPATHS+="-DCMAKE_INSTALL_OLDINCLUDEDIR=/cgnutools/include "

# Set the standard C++ library that clang will use to LLVM's libc++:
export  COPTS="-DCLANG_DEFAULT_CXX_STDLIB=libc++ "

# Set the runtime library that clang will use to compiler-rt:
export COPTS+="-DCLANG_DEFAULT_RTLIB=compiler-rt "

# Set libc++abi & libc++ to use compiler-rt instead of gcc's runtime:
export COPTS+="-DLIBCXX_USE_COMPILER_RT=ON "
export COPTS+="-DLIBCXXABI_USE_COMPILER_RT=ON "

# Set libc++abi to use libunwind to avoid dependace on GCC:
export COPTS+="-DLIBCXXABI_USE_LLVM_UNWINDER=ON "

# Enable Exception Handling:
export COPTS+="-DLLVM_ENABLE_EH=ON "

# Exception handling requires Runtime Type Info
export COPTS+="-DLLVM_ENABLE_RTTI=ON "

# Stage 1 clang's compiler-rt will require new delete definitions in libc++
export COPTS+="-DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=ON "

# Enable atomics to avoid using atomics from GCC:
export COPTS+="-DCOMPILER_RT_BUILD_STANDALONE_LIBATOMIC=OFF "
export COPTS+="-DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF "

# Turn off features ...
export  BOFF="-DLLVM_ENABLE_LIBXML2=OFF  -DLIBCXX_ENABLE_LOCALIZATION=OFF "
export BOFF+="-DLLVM_ENABLE_ZLIB=OFF     -DCLANG_TOOL_AMDGPU_ARCH_BUILD=OFF "
export BOFF+="-DLLVM_ENABLE_ZSTD=OFF     -DLIBUNWIND_INCLUDE_TESTS=OFF "
export BOFF+="-DLLVM_ENABLE_LIBEDIT=OFF  -DLIBUNWIND_INCLUDE_DOCS=OFF "

export BOFF+="-DLLVM_INCLUDE_DOCS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF "

# Turn off features that cause compiler-rt to NOT reference backtrace symbols from libexecinfo
export BOFF+="-DCOMPILER_RT_BUILD_GWP_ASAN=OFF "
export BOFF+="-DCOMPILER_RT_BUILD_LIBFUZZER=OFF "
export BOFF+="-DCOMPILER_RT_BUILD_ORC=OFF "


# Configure source:
cmake -B build -G Ninja -Wno-dev -S llvm \
      -DLLVM_ENABLE_PROJECTS="clang" -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_SHARED_LINKER_FLAGS="${LINKERFLAGS}  -Wl,--as-needed -lexecinfo" \
      ${CTOOLS} ${CTARG} ${CPATHS}  ${COPTS}  ${BOFF} -DCLANG_VENDOR="cgnutools 3.0.0" \
      -DBOOTSTRAP_LIBCXX_ENABLE_LOCALIZATION=ON -DBENCHMARK_INSTALL_DOCS=OFF -DBENCHMARK_USE_BUNDLED_GTEST=OFF \
      -DBUILD_SHARED_LIBS=ON -DCLANG_DEFAULT_UNWINDLIB=libunwind -DCOMPILER_RT_BUILD_MEMPROF=OFF \
      -DLLVM_BUILD_TOOLS=OFF -DLLVM_BUILD_UTILS=OFF  

# Build
ninja -C build libclang #... 2101 ...........Fail:


[173/2101] Building CXX object utils/TableGen/CMakeFiles/llvm-tblgen.dir/CodeGenSchedule.cpp.o
FAILED: utils/TableGen/CMakeFiles/llvm-tblgen.dir/CodeGenSchedule.cpp.o 
/cgnutools/bin/x86_64-cmlfs-linux-musl-g++ -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I/mnt/cmlfs/sources/llvm-project-14.0.6.src/build/utils/TableGen -I/mnt/cmlfs/sources/llvm-project-14.0.6.src/llvm/utils/TableGen -I/mnt/cmlfs/sources/llvm-project-14.0.6.src/build/include -I/mnt/cmlfs/sources/llvm-project-14.0.6.src/llvm/include -nostdinc++ -nodefaultlibs -isystem /cgnutools/include/c++/v1 -L/cgnutools/lib -Wl,-rpath,/cgnutools/lib -lc++ -lc++abi -lm -lc -lgcc_s -lgcc  -g -g1 -Wl,--as-needed -lexecinfo -fPIC -fno-semantic-interposition -fvisibility-inlines-hidden -Werror=date-time -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -Wno-long-long -Wimplicit-fallthrough -Wno-maybe-uninitialized -Wno-class-memaccess -Wno-redundant-move -Wno-pessimizing-move -Wno-noexcept-type -Wdelete-non-virtual-dtor -Wsuggest-override -Wno-comment -Wmisleading-indentation -fdiagnostics-color -ffunction-sections -fdata-sections -O3 -DNDEBUG -std=c++14 -MD -MT utils/TableGen/CMakeFiles/llvm-tblgen.dir/CodeGenSchedule.cpp.o -MF utils/TableGen/CMakeFiles/llvm-tblgen.dir/CodeGenSchedule.cpp.o.d -o utils/TableGen/CMakeFiles/llvm-tblgen.dir/CodeGenSchedule.cpp.o -c /mnt/cmlfs/sources/llvm-project-14.0.6.src/llvm/utils/TableGen/CodeGenSchedule.cpp
In file included from /cgnutools/include/c++/v1/limits:105,
                 from /cgnutools/include/c++/v1/math.h:308,
                 from /cgnutools/include/c++/v1/cmath:308,
                 from /mnt/cmlfs/sources/llvm-project-14.0.6.src/llvm/include/llvm/Support/MathExtras.h:19,
                 from /mnt/cmlfs/sources/llvm-project-14.0.6.src/llvm/include/llvm/ADT/APInt.h:19,
                 from /mnt/cmlfs/sources/llvm-project-14.0.6.src/llvm/utils/TableGen/CodeGenSchedule.h:17,
                 from /mnt/cmlfs/sources/llvm-project-14.0.6.src/llvm/utils/TableGen/CodeGenSchedule.cpp:14:
/cgnutools/include/c++/v1/type_traits: In instantiation of 'struct std::__1::__decay<const llvm::APInt&, true>':
/cgnutools/include/c++/v1/type_traits:1591:89:   required from 'struct std::__1::decay<const llvm::APInt&&>'
/cgnutools/include/c++/v1/__utility/pair.h:132:16:   required by substitution of 'template<class _Tuple, typename std::__1::enable_if<typename std::__1::conditional<(std::__1::__tuple_like_with_size<_Tuple, 2, typename std::__1::__uncvref<_Tp>::type>::value && (! std::__1::is_same<typename std::__1::decay<_Tp>::type, std::__1::pair<const llvm::Record*, llvm::OpcodeInfo> >::value)), std::__1::pair<const llvm::Record*, llvm::OpcodeInfo>::_CheckTupleLikeConstructor, std::__1::__check_tuple_constructor_fail>::type::__enable_implicit<_Tuple>(), void>::type* <anonymous> > constexpr std::__1::pair<const llvm::Record*, llvm::OpcodeInfo>::pair(_Tuple&&) [with _Tuple = const llvm::APInt&&; typename std::__1::enable_if<typename std::__1::conditional<(std::__1::__tuple_like_with_size<_Tuple, 2, typename std::__1::__uncvref<_Tp>::type>::value && (! std::__1::is_same<typename std::__1::decay<_Tp>::type, std::__1::pair<const llvm::Record*, llvm::OpcodeInfo> >::value)), std::__1::pair<const llvm::Record*, llvm::OpcodeInfo>::_CheckTupleLikeConstructor, std::__1::__check_tuple_constructor_fail>::type::__enable_implicit<_Tuple>(), void>::type* <anonymous> = <missing>]'
/mnt/cmlfs/sources/llvm-project-14.0.6.src/llvm/utils/TableGen/CodeGenSchedule.cpp:373:69:   required from here
/cgnutools/include/c++/v1/type_traits:1582:30: error: forming pointer to reference type 'std::__1::remove_extent<const llvm::APInt&>::type' {aka 'const llvm::APInt&'}
 1582 |                      >::type type;
      |                              ^~~~
     
