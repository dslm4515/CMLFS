# cgnutools: LLVM Runtime libraries (libunwind, libcxxabi, libcxx)
#
# Build as cmlfs.
#
# Build LLVM Runtime libraries fo stage 0 clang to use.
#

# Rename for shorter paths:
mv llvm-project-15.0.5.src llvm
export LLVMSRC=${CMLFS}/sources/llvm

cd $LLVMSRC

# Apply patches for main LLVM source ... from alpine linux:
patch -Np1 -i ../patches/llvm15-alpine/0001-Disable-dynamic-lib-tests-for-musl-s-dlclose-is-noop.patch
patch -Np1 -i ../patches/llvm15-alpine/fix-memory-mf_exec-on-aarch64.patch
patch -Np1 -i ../patches/llvm15-alpine/install-prefix.patch
patch -Np1 -i ../patches/llvm15-alpine/llvm-stack-size.patch

# Known broken test on musl
cd llvm
rm -v test/CodeGen/AArch64/wineh4.mir
# https://github.com/llvm/llvm-project/issues/47657
rm -v test/ExecutionEngine/Interpreter/intrinsics.ll

# If builing on x86, remove tests:
rm -v test/Object/macho-invalid.test test/tools/llvm-size/radix.test unittests/Support/JSONTest.cpp
sed -i "/JSONTest.cpp/d" unittests/Support/CMakeLists.txt

# If building on arm*, remove tests:
rm -v test/tools/llvm-readobj/ELF/dependent-libraries.test test/Object/macho-invalid.test \
      test/tools/llvm-size/radix.test test/tools/gold/X86/split-dwarf.ll \
      test/ExecutionEngine/frem.ll test/tools/llvm-dwarfdump/X86/prettyprint_types.s \
      test/tools/llvm-dwarfdump/X86/simplified-template-names.s \
      unittests/ExecutionEngine/Orc/OrcCAPITest.cpp \
      test/CodeGen/RISCV/rv32zbp.ll \
      test/CodeGen/RISCV/rv64zbp.ll
sed -i "/OrcCAPITest.cpp/d" unittests/ExecutionEngine/Orc/CMakeLists.txt

# Return to top-level
cd ..

# Apply patches for clang
cd clang
patch -Np1 -i ../../patches/llvm15-clang-alpine/10-add-musl-triples.patch
patch -Np1 -i ../../patches/llvm15-clang-alpine/clang-003-as-needed.patch

# Apply patches for compiler-rt 
cd ../compiler-rt
patch -Np2 -i ../../patches/llvm15-compiler-rt-alpine/compiler-rt-sanitizer-ppc64-musl.patch
patch -Np2 -i ../../patches/llvm15-compiler-rt-alpine/compiler-rt-sanitizer-supported-arch.patch

# Apply patches for libcxx
cd ../libcxx
patch -Np2 -i ../../patches/llvm15-libcxx-alpine/libcxx-musl.patch
patch -Np2 -i ../../patches/llvm15-libcxx-alpine/libcxx-ppc.patch

cd ..

# Fix libcxx localization:
# Musl doesn't support strtoll_l(), so replace it with a simple strtoll() call.
# edit libcxx/include/locale

# Set CC and CXX compiler with cross-gcc
export CXX=${CMLFS_TARGET}-g++
export  CC=${CMLFS_TARGET}-gcc 

# Set flags to greatly reduce debugging symbols
CFLAGS=' -g -g1 -Wl,--as-needed -lexecinfo'
CXXFLAGS=$CFLAGS
export CFLAGS CXXFLAGS

# Set the build options ..
export  CONFIG_OPTIONS="-DCMAKE_BUILD_TYPE=Release "
export CONFIG_OPTIONS+="-DBUILD_SHARED_LIBS=ON "

# Build libc++abi with compiler-rt [from cgnutools] and 
# libunwind from cgnutools:
#export CONFIG_OPTIONS+="-DLIBCXXABI_USE_COMPILER_RT=ON "
#export CONFIG_OPTIONS+="-DLIBCXXABI_USE_LLVM_UNWINDER=ON "

export CONFIG_OPTIONS+="-DLIBCXXABI_ENABLE_FORGIVING_DYNAMIC_CAST=ON "

# Stage 1 compiler-rt will require new DELETE definitions
export CONFIG_OPTIONS+="-DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=ON "

# Libc++ will not build with localization as musl does not 
# have built in support. To enable, libc++ will need patching.
export CONFIG_OPTIONS+="-DLIBCXX_ENABLE_LOCALIZATION=ON " #<<<<<<<<<<<<

# Build libc++ with musl support
export CONFIG_OPTIONS+="-DLIBCXX_HAS_MUSL_LIBC=ON "

# Build libc++ & libunwind with compiler-rt [from cgnutools]:
#export CONFIG_OPTIONS+="-DLIBCXX_USE_COMPILER_RT=ON "
#export CONFIG_OPTIONS+="-DLIBUNWIND_USE_COMPILER_RT=ON "

# Set the compiler and linker flags...
export LINKERFLAGS="-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1"
export  CONFIG_TOOLS="-DCMAKE_C_COMPILER=${CC} "
export CONFIG_TOOLS+="-DCMAKE_CXX_COMPILER=${CXX} "
#export CONFIG_TOOLS+="-DCMAKE_ADDR2LINE=/cgnutools/bin/llvm-addr2line "
#export CONFIG_TOOLS+="-DCMAKE_AR=/cgnutools/bin/llvm-ar "
export CONFIG_TOOLS+="-DCMAKE_CXX_COMPILER=${CXX} "
#export CONFIG_TOOLS+="-DCMAKE_CXX_COMPILER_AR=/cgnutools/bin/llvm-ar "
#export CONFIG_TOOLS+="-DCMAKE_CXX_COMPILER_RANLIB=/cgnutools/bin/llvm-ranlib "
export CONFIG_TOOLS+="-DCMAKE_C_COMPILER=${CC} "
#export CONFIG_TOOLS+="-DCMAKE_C_COMPILER_AR=/cgnutools/bin/llvm-ar "
#export CONFIG_TOOLS+="-DCMAKE_C_COMPILER_RANLIB=/cgnutools/bin/llvm-ranlib "
#export CONFIG_TOOLS+="-DCMAKE_LINKER=/cgnutools/bin/lld "
#export CONFIG_TOOLS+="-DCMAKE_NM=/cgnutools/bin/llvm-nm "
#export CONFIG_TOOLS+="-DCMAKE_OBJCOPY=/cgnutools/bin/llvm-objcopy "
#export CONFIG_TOOLS+="-DCMAKE_OBJDUMP=/cgnutools/bin/llvm-objdump "
#export CONFIG_TOOLS+="-DCMAKE_RANLIB=/cgnutools/bin/llvm-ranlib "
#export CONFIG_TOOLS+="-DCMAKE_READELF=/cgnutools/bin/llvm-readelf "
#export CONFIG_TOOLS+="-DCMAKE_STRIP=/cgnutools/bin/llvm-strip "

# Set paths...
export  CONFIG_PATHS="-DCMAKE_INSTALL_PREFIX=/cgnutools "
export CONFIG_PATHS+="-DCMAKE_INSTALL_OLDINCLUDEDIR=/cgnutools/include "
export CONFIG_PATHS+="-DCMAKE_INSTALL_BINDIR=/cgnutools/bin "
export CONFIG_PATHS+="-DCMAKE_INSTALL_DATAROOTDIR=/cgnutools/share "
export CONFIG_PATHS+="-DCMAKE_INSTALL_INCLUDEDIR=/cgnutools/include "
export CONFIG_PATHS+="-DCMAKE_INSTALL_LIBDIR=/cgnutools/lib "
export CONFIG_PATHS+="-DCMAKE_INSTALL_LIBEXECDIR=/cgnutools/libexec "
export CONFIG_PATHS+="-DCMAKE_INSTALL_SBINDIR=/cgnutools/sbin "
export CONFIG_PATHS+="-DBacktrace_LIBRARY=/cgnutools/lib/libexecinfo.so.1 "
export CONFIG_PATHS+="-DBacktrace_INCLUDE_DIR=/cgnutools/include "
#export CONFIG_PATHS+="-DLIBCXXABI_INSTALL_INCLUDE_DIR=/llvmtools/include/c++/v1 "           #default: include/c++/v1
#export CONFIG_PATHS+="-DLIBCXXABI_INSTALL_LIBRARY_DIR=/llvmtools/lib/x86_64-pc-linux-musl " #default: lib/x86_64-pc-linux-musl
#export CONFIG_PATHS+="-DLIBCXX_INSTALL_INCLUDE_DIR=/llvmtools/include/c++/v1 "              #default: include/c++/v1
#export CONFIG_PATHS+="-DLIBCXX_INSTALL_INCLUDE_TARGET_DIR=/llvmtools/include/c++/v1 "       #default: include/c++/v1
#export CONFIG_PATHS+="-DLIBCXX_INSTALL_LIBRARY_DIR=/llvmtools/lib/x86_64-pc-linux-musl "    #default: lib/x86_64-pc-linux-musl
export CONFIG_PATHS+="-DLIBCXX_INSTALL_RUNTIME_DIR=/cgnutools/bin "                         #default: bin
export CONFIG_PATHS+="-DLIBUNWIND_INSTALL_LIBRARY_DIR=/cgnutools/lib "
export CONFIG_PATHS+="-DLIBUNWIND_INSTALL_INCLUDE_DIR=/cgnutools/include "
export CONFIG_PATHS+="-DLIBUNWIND_INSTALL_RUNTIME_DIR=/cgnutools/lib"

# Turn off unwanted features, docs and tests
export  BUILD_OFF="-DLLVM_BUILD_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_GO_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_TESTS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_DOCS=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_EXAMPLES=OFF "
export BUILD_OFF+="-DLLVM_INCLUDE_BENCHMARKS=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_OCAMLDOC=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_BACKTRACES=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBEDIT=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBXML2=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_LIBPFM=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_TERMINFO=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_ZLIB=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_Z3_SOLVER=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_CRASH_OVERRIDES=OFF "
export BUILD_OFF+="-DLLVM_ENABLE_ZSTD=OFF "
export BUILD_OFF+="-DLLVM_APPEND_VC_REV=OFF "
export BUILD_OFF+="-DLLVM_TOOL_XCODE_TOOLCHAIN_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_XRAY_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_GO_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_BUGPOINT_PASSES_BUILD=OFF "
export BUILD_OFF+="-DLLVM_TOOL_BUGPOINT_BUILD=OFF "
export BUILD_OFF+="-DLIBCXX_INCLUDE_BENCHMARKS=OFF "
export BUILD_OFF+="-DLLVM_TOOL_LLVM_AS_FUZZER_BUILD=OFF -DLLVM_TOOL_LLVM_BCANALYZER_BUILD=OFF -DLLVM_TOOL_LLVM_DLANG_DEMANGLE_FUZZER_BUILD=OFF "

# Configure source:
cmake -B build -G Ninja -Wno-dev -S llvm \
      -DCMAKE_EXE_LINKER_FLAGS="${LINKERFLAGS}"    \
      -DCMAKE_SHARED_LINKER_FLAGS="${LINKERFLAGS}" \
      ${CONFIG_TOOLS} ${CONFIG_OPTIONS} ${CONFIG_PATHS} ${BUILD_OFF} \
      -DLLVM_ENABLE_PROJECTS="libcxxabi;libcxx;libunwind" \
      -DLLVM_TARGETS_TO_BUILD=X86 \
      -DLLVM_TARGET_ARCH=host \
      -DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl \
      -DLLVM_HOST_TRIPLE=x86_64-pc-linux-musl -DLIBUNWIND_INSTALL_HEADERS=ON

# Compile
ninja -C build unwind #19 targets
ninja -C build cxxabi #829
ninja -C build cxx #77

# Install to cgnutools
ninja -C build install-unwind
ninja -C build install-cxxabi
ninja -C build install-cxxabi-headers
ninja -C build install-cxx
ninja -C build install-cxx-headers

# Move misplaced headers:
mv -v    /cgnutools/include/x86_64-pc-linux-musl/c++/v1/* /cgnutools/include/c++/v1/
rm -rfv  /cgnutools/include/x86_64-pc-linux-musl/c++/v1

# Remove build directory for next build.
# Same source tree will be used next
rm -rf build

unset CONFIG_TOOLS CONFIG_OPTIONS CONFIG_PATHS LINKERFLAGS LINKERFLAGS BUILD_OFF
