# cgnutools: Stage0 Clang ( with compiler-rt,libcxx,libcxxabi,lld)
#
# Build as cmlfs
#
# NOTES: Stage 0 Clang seems to work (can compile musl libc, ncurses, etc), yet when 
# building stage 1 clang (in llvmools) CMake complains about Stage 0 clang lacking 
# atomics OR cannot find kernel headers already installed in llvmtools.
#
# Rename for shorter paths:
mv llvm-project-15.0.5.src llvm-prj
export LLVMSRC=${CMLFS}/sources/llvm-prj

cd $LLVMSRC

# Musl doesn't support strtoll_l(), so replace it with a simple strtoll() call.
# Apply patches to allow localization of libc++: Force 'abi' changes (glibc->musl)
# to source and disable xlocale.h (holds abi changes).  
#patch -Np1 -i ../patches/llvm1505-cmlfs/libcxx-use-strtoll_strtoul.patch 

# Force 'abi' changes (glibc->musl) to source and disable xlocale.h (holds abi changes). 
#patch -Np1 -i ../patches/llvm1505-cmlfs/remove-locale-inlines.patch 

# Known broken test on musl
cd llvm
rm -v test/CodeGen/AArch64/wineh4.mir
# https://github.com/llvm/llvm-project/issues/47657
rm -v test/ExecutionEngine/Interpreter/intrinsics.ll

# If builing on x86, remove tests:
rm -v test/Object/macho-invalid.test test/tools/llvm-size/radix.test unittests/Support/JSONTest.cpp
sed -i "/JSONTest.cpp/d" unittests/Support/CMakeLists.txt

# If building on arm*, remove tests:
rm -v test/tools/llvm-readobj/ELF/dependent-libraries.test test/Object/macho-invalid.test \
      test/tools/llvm-size/radix.test test/tools/gold/X86/split-dwarf.ll \
      test/ExecutionEngine/frem.ll test/tools/llvm-dwarfdump/X86/prettyprint_types.s \
      test/tools/llvm-dwarfdump/X86/simplified-template-names.s \
      unittests/ExecutionEngine/Orc/OrcCAPITest.cpp \
      test/CodeGen/RISCV/rv32zbp.ll \
      test/CodeGen/RISCV/rv64zbp.ll
sed -i "/OrcCAPITest.cpp/d" unittests/ExecutionEngine/Orc/CMakeLists.txt

# Return to top-level
cd ..

# Set flags to greatly reduce debugging symbols
CFLAGS=' -g -g1 -Wl,--as-needed -lexecinfo'
CXXFLAGS=$CFLAGS
export CFLAGS CXXFLAGS

# Set the compiler and linker flags...
export LINKERFLAGS="-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1"
export  CTOOLS="-DCMAKE_C_COMPILER=${CMLFS_TARGET}-gcc "
export CTOOLS+="-DCMAKE_CXX_COMPILER=${CMLFS_TARGET}-g++ "
export CTOOLS+="-DCLANG_DEFAULT_LINKER=/cgnutools/bin/ld.lld "

# Set the tuples & build target ...
export  CTARG="-DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl " 
export CTARG+="-DLLVM_HOST_TRIPLE=x86_64-pc-linux-musl " 
export CTARG+="-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl " 
export CTARG+="-DLLVM_TARGETS_TO_BUILD=X86 "
export CTARG+="-DLLVM_TARGET_ARCH=X86 "
export CTARG+="-DLLVM_TARGETS_TO_BUILD=Native "

# Set the paths ...
export  CPATHS="-DCMAKE_INSTALL_PREFIX=/cgnutools "
export CPATHS+="-DDEFAULT_SYSROOT=/cgnutools "
export CPATHS+="-DLIBUNWIND_INSTALL_LIBRARY_DIR=/cgnutools/lib "
export CPATHS+="-DCMAKE_INSTALL_OLDINCLUDEDIR=/cgnutools/include "

# Set bootstrap options..
# https://discourse.llvm.org/t/bootstrapping-standalone-llvm-clang-libc-lld-toolchain/3069
export  CBSTRAP="-DBOOTSTRAP_CMAKE_BUILD_TYPE=Release "
export CBSTRAP+="-DCLANG_ENABLE_BOOTSTRAP=ON "
export CBSTRAP+="-DBOOTSTRAP_CLANG_DEFAULT_CXX_STDLIB=libc++ "
export CBSTRAP+="-DBOOTSTRAP_CLANG_DEFAULT_RTLIB=compiler-rt "
export CBSTRAP+="-DBOOTSTRAP_LIBCXX_USE_COMPILER_RT=ON "       
export CBSTRAP+="-DBOOTSTRAP_LIBCXXABI_USE_COMPILER_RT=ON "    
#export CBSTRAP+="-DBOOTSTRAP_LIBCXXABI_USE_LLVM_UNWINDER=ON " 
export CBSTRAP+="-DBOOTSTRAP_LLVM_USE_LINKER=lld "
#export CBSTRAP+="-DBOOTSTRAP_LIBUNWIND_USE_COMPILER_RT=ON "
# make sure bootstrap has atomics
#export CBSTRAP+="-DBOOTSTRAP_COMPILER_RT_BUILD_STANDALONE_LIBATOMIC=ON "
#export CBSTRAP+="-DBOOTSTRAP_COMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF "    

# Set the standard C++ library that clang will use to LLVM's libc++:
export  COPTS="-DCLANG_DEFAULT_CXX_STDLIB=libc++ "

# Set the runtime library that clang will use to compiler-rt:
export COPTS+="-DCLANG_DEFAULT_RTLIB=compiler-rt "

# Set libc++abi & libc++ to use compiler-rt instead of gcc's runtime:
export COPTS+="-DLIBCXX_USE_COMPILER_RT=ON " 
export COPTS+="-DLIBCXXABI_USE_COMPILER_RT=ON "

# Set libc++abi to use libunwind to avoid dependace on GCC:
#export COPTS+="-DLIBCXXABI_USE_LLVM_UNWINDER=ON "

# Enable Exception Handling:
export COPTS+="-DLLVM_ENABLE_EH=ON "

# Exception handling requires Runtime Type Info
export COPTS+="-DLLVM_ENABLE_RTTI=ON "

# Stage 1 clang's compiler-rt will require new delete definitions in libc++
export COPTS+="-DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=ON "

# Enable atomics to avoid using atomics from GCC:
export COPTS+="-DCOMPILER_RT_BUILD_STANDALONE_LIBATOMIC=OFF "
export COPTS+="-DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF "

# Install libunwind headers
export COPTS+="-DLIBUNWIND_INSTALL_HEADERS=ON "

# Turn off features ...
export  BOFF="-DLLVM_ENABLE_LIBXML2=OFF  -DLIBCXX_ENABLE_LOCALIZATION=ON "
export BOFF+="-DLLVM_ENABLE_ZLIB=OFF     -DCLANG_TOOL_AMDGPU_ARCH_BUILD=OFF "
export BOFF+="-DLLVM_ENABLE_ZSTD=OFF     -DLIBUNWIND_INCLUDE_TESTS=OFF "
export BOFF+="-DLLVM_ENABLE_LIBEDIT=OFF  -DLIBUNWIND_INCLUDE_DOCS=OFF "
export BOFF+="-DLLVM_INCLUDE_DOCS=OFF    -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF "

export BOFF+="-DLLVM_BUILD_TOOLS=OFF -DLLVM_BUILD_UTILS=OFF -DLLVM_INCLUDE_UTILS=OFF -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON "
export BOFF+="-DLLVM_ENABLE_LIBPFM=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_TOOL_BUGPOINT_BUILD=OFF -DLLVM_TOOL_BUGPOINT_PASSES_BUILD=OFF "
export BOFF+="-DLLVM_TOOL_DSYMUTIL_BUILD=OFF -DLLVM_TOOL_DXIL_DIS_BUILD=OFF -DLLVM_TOOL_GOLD_BUILD=OFF -DLLVM_TOOL_LLC_BUILD=OFF " 
export BOFF+="-DLLVM_TOOL_LLI_BUILD=OFF -DLLVM_TOOL_LLVM_AS_FUZZER_BUILD=OFF -DLLVM_TOOL_LLVM_BCANALYZER_BUILD=OFF "
export BOFF+="-DLLVM_TOOL_LLVM_CAT_BUILD=OFF -DLLVM_TOOL_LLVM_CFI_VERIFY_BUILD=OFF -DLLVM_TOOL_LLVM_COV_BUILD=OFF -DLLVM_TOOL_LLVM_CVTRES_BUILD=OFF "

# Turn off features that cause compiler-rt to NOT reference backtrace symbols from libexecinfo
export BOFF+="-DCOMPILER_RT_BUILD_GWP_ASAN=OFF "
export BOFF+="-DCOMPILER_RT_BUILD_LIBFUZZER=OFF "
export BOFF+="-DCOMPILER_RT_BUILD_ORC=OFF "

cmake -B build -G Ninja -Wno-dev -S llvm  \
  -DCMAKE_BUILD_TYPE=Release \
  -DLLVM_ENABLE_PROJECTS="compiler-rt;lld;clang" \
  -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi" \
  -DCMAKE_EXE_LINKER_FLAGS="${LINKERFLAGS}" \
  -DCMAKE_SHARED_LINKER_FLAGS="${LINKERFLAGS}  -Wl,--as-needed -lexecinfo" \
  ${CTOOLS} ${CTARG} ${CPATHS} ${CBSTRAP} ${COPTS}  ${BOFF} -DLLVM_ENABLE_UNWIND_TABLES=OFF \
  -DCLANG_VENDOR="cgnutools 3.0.0" -DLIBUNWIND_ENABLE_SHARED=OFF -DLIBCXX_HAS_MUSL_LIBC=ON

# Compile only what we need for a stage 0 clang
#ninja -C build builtins    # 165 targets ... pass
#ninja -C build llvm-tblgen # 235 ........... pass
#ninja -C build cxxabi      # 2585 .......... FAIL 
#ninja -C build cxx         # 89 ............ 
#ninja -C build compiler-rt # 598
#ninja -C build lld #1652 
#ninja -C build libclang #798
#ninja -C build clang #288

################################################## FAIL output: ##########################################################
FAILED: /mnt/cmlfs/sources/llvm-git/llvm-project/build/lib/x86_64-pc-linux-musl/libc++abi.so.1.0 
: && /mnt/cmlfs/sources/llvm-git/llvm-project/build/./bin/clang++ --target=x86_64-pc-linux-musl -fPIC -g -g1 -Wl,--as-needed -lexecinfo -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wdelete-non-virtual-dtor -Wno-comment -fdiagnostics-color  -O3 -DNDEBUG  -Wl,-z,defs -Wl,-z,nodelete -shared -Wl,-soname,libc++abi.so.1 -o /mnt/cmlfs/sources/llvm-git/llvm-project/build/lib/x86_64-pc-linux-musl/libc++abi.so.1.0 libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_aux_runtime.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_default_handlers.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_demangle.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_exception_storage.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_guard.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_handlers.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_vector.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_virtual.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/stdlib_exception.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/stdlib_stdexcept.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/stdlib_typeinfo.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/abort_message.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/fallback_malloc.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/private_typeinfo.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/stdlib_new_delete.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_exception.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_personality.cpp.o libcxxabi/src/CMakeFiles/cxxabi_shared_objects.dir/cxa_thread_atexit.cpp.o   && :
clang-16: warning: '-fuse-ld=' taking a path is deprecated; use '--ld-path=' instead [-Wfuse-ld-path]
/bin/ld: cannot find crtbeginS.o: No such file or directory
/bin/ld: cannot find -lc++: No such file or directory
/bin/ld: cannot find crtendS.o: No such file or directory
clang-16: error: linker command failed with exit code 1 (use -v to see invocation)
ninja: build stopped: subcommand failed.
FAILED: runtimes/CMakeFiles/cxxabi /mnt/cmlfs/sources/llvm-git/llvm-project/build/runtimes/CMakeFiles/cxxabi 
cd /mnt/cmlfs/sources/llvm-git/llvm-project/build/runtimes/runtimes-bins && /usr/bin/cmake --build /mnt/cmlfs/sources/llvm-git/llvm-project/build/runtimes/runtimes-bins/ --target cxxabi --config Release
ninja: build stopped: subcommand failed.
###########################################################################################################################

for t in builtins unwind cxxabi cxx compiler-rt lld libclang clang ;
do
  ninja -C build $t
done

# Compile LLVM binutils(binary utilities)
for b in addr2line ar as config cxxdump diff link lipo \
         lto lto2 nm objcopy objdump ranlib rc readelf \
         size split strings strip tblgen ;
do
  ninja -C build llvm-$b
done

# Install only what we built to /cgnutools
#ninja -C build install-builtins #............... libclang_rt.builtins.a
#ninja -C build install-crt #.................... clang_rt.crtbegin.o;clang_rt.crtbend.o
#ninja -C build install-unwind #................. /cgnutools/lib/libunwind.so.1.0 & /cgnutools/include/libunwind.h
#ninja -C build install-cxxabi #................. /cgnutools/lib/x86_64-pc-linux-musl/libc++abi.so.1.0
#ninja -C build install-cxxabi-headers #......... /cgnutools/include/c++/v1/__cxxabi_config.h;/cgnutools/include/c++/v1/cxxabi_config.h
#ninja -C build install-cxx #.................... /cgnutools/lib/x86_64-pc-linux-musl/libc++.so.1.0
#ninja -C build install-cxx-headers # ........... /cgnutools/include/c++/v1;/cgnutools/include/x86_64-pc-linux-musl/c++/v1
#ninja -C build install-compiler-rt # ........... /cgnutools/lib/clang/15.0.5/lib/x86_64-pc-linux-musl/*
#ninja -C build install-lld # ................... lld-link;ld.lld;ld64.lld;wasm-ld
#ninja -C build install-libclang # .............. /cgnutools/lib/libclang.so.15.0.5
#ninja -C build install-libclang-headers #....... /cgnutools/include/clang-c
#ninja -C build install-clang # ................. /cgnutools/bin/{clang,clang-15,clang++,clang-cl,clang-cpp}
#ninja -C build install-x86-resource-headers #..... /cgnutools/lib/clang/15.0.5/include/*
#ninja -C build install-utility-resource-headers #../cgnutools/lib/clang/15.0.5/include/mm_malloc.h
#ninja -C build install-ve-resource-headers #......./cgnutools/lib/clang/15.0.5/include/velintrin*
#ninja -C build install-compiler-rt-headers #......./cgnutools/lib/clang/15.0.5/include/sanitizer/*
#ninja -C build install-clang-resource-headers #..../cgnutools/lib/clang/15.0.5/include/builtins.h
#ninja -C build install-clang-headers #............./cgnutools/include/clang/AST

for t in butiltins crt unwind cxxabi cxx compiler-rt lld libclang libclang-headers clang \
         x86-resource-headers utility-resource-headers ve-resource-headers \
         compiler-rt-headers clang-resource-headers clang-headers ;
do
  ninja -C build install-$t
done

# Install LLVM binutils:
for b in addr2line ar as config cxxdump diff link lipo \
         lto lto2 nm objcopy objdump ranlib rc readelf \
         size split strings strip tblgen ;
do
  ninja -C build install-llvm-$b
done

unset CC CXX CFLAGS CXXFLAGS CTOOLS CTARG CPATHS CBSTRAP COPTS BOFF LINKERFLAGS
