# cgnutools: Configure cgnutools to build llvmtools
# Modify as cmlfs user

# Configure clang to build binaries with /llvmtools/lib/ld-musl-x86_64.so.1 instead
# of /lib/ld-musl-x86_64.so.1. This is similar in Musl-LFS/LFS when gcc specs
# file is modified to set the dynamic linker in /tools instead of host's /lib.
ln -sv clang-15   /cgnutools/bin/${TARGET_TUPLE}-clang
ln -sv clang-15   /cgnutools/bin/${TARGET_TUPLE}-clang++
cat > /cgnutools/bin/${TARGET_TUPLE}.cfg << "EOF"
-Wl,-dynamic-linker /llvmtools/lib/ld-musl-x86_64.so.1
EOF

# .. configure stage0 clang to use compiler-rt instead of GCC's runtime. This
# will allow to build stage1 clang with GCC independence.
echo "-rtlib=compiler-rt "  >> /cgnutools/bin/${TARGET_TUPLE}.cfg

# ... also configure stage0 clang to use newly built libc++ headers & libraries
echo "-stdlib=libc++ " >> /cgnutools/bin/${TARGET_TUPLE}.cfg 
echo "-lunwind"  >> /cgnutools/bin/${TARGET_TUPLE}.cfg

# Set LLD as default toolchain linker
ln -sv lld /cgnutools/bin/ld

# When stage0 clang compiles, output expects libunwind in /llvmtools/lib
ln -sv /cgnutools/lib/x86_64-pc-linux-musl/libunwind.so.1.0 /llvmtools/lib/libunwind.so.1

# Configure cross-GCC of cgnutools to match the same output as clang
# Dump current specs
#export SPECFILE=`dirname $(${CMLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
#${CMLFS_TARGET}-gcc -dumpspecs > specs

# Modify dumped specs file
#sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/llvmtools\/lib\/ld-musl-x86_64.so.1/g' specs

# Check:
#grep "/llvmtools/lib/ld-musl-x86_64.so.1" specs  --color=auto

# Install modified specs to the cgnutools toolchain
#mv -v specs $SPECFILE
#unset SPECFILE

# Create link for libc.so. It will be replaced with a clang-built
# one next
mkdir -v /llvmtools/lib
ln -sv /cgnutools/lib/libc.so /llvmtools/lib/ld-musl-$(uname -m).so.1

# Check the PATH
export PATH=/cgnutools/bin:/llvmtools/bin:/bin:/usr/bin

# Test GCC of cgnutools toolchain:
echo "int main(){}" > dummy.c
${CMLFS_TARGET}-gcc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /llvmtools'
# Shoud output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]

# Check if the correct start files are used
grep  'lib.*/crt[1in].*succeeded' dummy.log | cut -d ' ' -f 4-5 | cut -b 5-
# Should output:
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crt1.o succeeded
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crti.o succeeded
# /cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crtn.o succeeded

# Make sure no libraries are loaded from the host:
grep succeeded dummy.log

# Should output:
# attempt to open /mnt/cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crt1.o succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crti.o succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/crtbegin.o succeeded
# attempt to open /tmp/cctE6xgF.o succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/libgcc.a succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/../../../../x86_64-cmlfs-linux-musl/lib/../lib/libgcc_s.so succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/../../../../x86_64-cmlfs-linux-musl/lib/../lib/libgcc_s.so.1 succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/libgcc.a succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/libc.so succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/libgcc.a succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/../../../../x86_64-cmlfs-linux-musl/lib/../lib/libgcc_s.so succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/../../../../x86_64-cmlfs-linux-musl/lib/../lib/libgcc_s.so.1 succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/libgcc.a succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../lib/gcc/x86_64-cmlfs-linux-musl/12.2.0/crtend.o succeeded
# attempt to open /mnt/cmlfs/cgnutools/bin/../../cgnutools/lib/../lib/crtn.o succeeded

# If all is good, clean up
rm -rf a.out dummy.log

# Test Clang of cgnutools toolchain:
${TARGET_TUPLE}-clang dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /llvmtools'
# Shoud output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]

# Check if the correct start files are used
grep  'crt[1in]' dummy.log | grep ld.lld:
# Should output:
# /cgnutools/lib/Scrt1.o succeeded
# /cgnutools/lib/crti.o succeeded
# /cgnutools/lib/crtn.o succeeded

# Make sure no libraries are loaded from the host:
grep ld.lld:  dummy.log

# Should output:
# ld.lld: /cgnutools/lib/Scrt1.o
# ld.lld: /cgnutools/lib/crti.o
# ld.lld: /mnt/cmlfs/cgnutools/lib/clang/15.0.5/lib/x86_64-cmlfs-linux-musl/clang_rt.crtbegin.o
# ld.lld: /cgnutools/lib/libunwind.so
# ld.lld: /tmp/dummy-0ef0e1.o
# ld.lld: /mnt/cmlfs/cgnutools/lib/clang/15.0.5/lib/x86_64-cmlfs-linux-musl/libclang_rt.builtins.a
# ld.lld: /cgnutools/lib/libc.so
# ld.lld: /mnt/cmlfs/cgnutools/lib/clang/15.0.5/lib/x86_64-cmlfs-linux-musl/libclang_rt.builtins.a
# ld.lld: /mnt/cmlfs/cgnutools/lib/clang/15.0.5/lib/x86_64-cmlfs-linux-musl/clang_rt.crtend.o
# ld.lld: /cgnutools/lib/crtn.o

# Check if clang++ has atomics. Usually atomics are provided by gcc.
# Building LLVM for llvmtools requires clang++ to support std::atomic
cat > atomics-test.cpp << "EOF"
#include <atomic>
std::atomic<int> x;
std::atomic<short> y;
std::atomic<char> z;
int main() {
  ++z;
    ++y;
      return ++x;
      }
EOF

${TARGET_TUPLE}-clang++ atomics-test.cpp  -v -Wl,--verbose &> atomics-test.log

# Check for errors during compile or link:
grep error:  atomics-test.log

# Should return nothing if there are no errors.

# Test if stage0 clang support C++11
cat > cxx11-test.cpp << "EOF"
#include <iostream>

int main(){
   #if __cplusplus==201402L
   std::cout << "C++14" << std::endl;
   #elif __cplusplus==201103L
   std::cout << "C++11" << std::endl;
   #else
   std::cout << "C++" << std::endl;
   #endif

   return 0;
}
EOF

${TARGET_TUPLE}-clang++ cxx11-test.cpp -v -Wl,--verbose &> cxx11-test.log

# Check for errors during compile or link:
grep error: cxx11-test.log

# Should return nothing if there are no errors.

# If all is good, clean up:
rm -v dummy.log dummy.c a.out atomics-test.cpp atomics-test.log cxx11-test.cpp cxx11-test.log
