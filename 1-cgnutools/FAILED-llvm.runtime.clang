# cgnutools: Stage 0 Clang ( with compiler-rt,libcxx,libcxxabi,libunwind,lld)
#
# Build as cmlfs
#
# NOTES: Build a stage 0 clang with compiler-rt support AND gcc dependancy. Later,
# Stage 1 clang will be built with only compiler-rt support

# Rename for shorter paths:
mv llvm-project-15.0.5.src llvm
export LLVMSRC=${CMLFS}/sources/llvm

cd $LLVMSRC

# Apply patches for main LLVM source ... from alpine linux:
patch -Np1 -i ../patches/llvm15-alpine/0001-Disable-dynamic-lib-tests-for-musl-s-dlclose-is-noop.patch
patch -Np1 -i ../patches/llvm15-alpine/fix-memory-mf_exec-on-aarch64.patch
patch -Np1 -i ../patches/llvm15-alpine/install-prefix.patch
patch -Np1 -i ../patches/llvm15-alpine/llvm-stack-size.patch

# Known broken test on musl
cd llvm
rm -v test/CodeGen/AArch64/wineh4.mir
# https://github.com/llvm/llvm-project/issues/47657
rm -v test/ExecutionEngine/Interpreter/intrinsics.ll

# If builing on x86, remove tests:
rm -v test/Object/macho-invalid.test test/tools/llvm-size/radix.test unittests/Support/JSONTest.cpp
sed -i "/JSONTest.cpp/d" unittests/Support/CMakeLists.txt

# If building on arm*, remove tests:
rm -v test/tools/llvm-readobj/ELF/dependent-libraries.test test/Object/macho-invalid.test \
      test/tools/llvm-size/radix.test test/tools/gold/X86/split-dwarf.ll \
      test/ExecutionEngine/frem.ll test/tools/llvm-dwarfdump/X86/prettyprint_types.s \
      test/tools/llvm-dwarfdump/X86/simplified-template-names.s \
      unittests/ExecutionEngine/Orc/OrcCAPITest.cpp \
      test/CodeGen/RISCV/rv32zbp.ll \
      test/CodeGen/RISCV/rv64zbp.ll
sed -i "/OrcCAPITest.cpp/d" unittests/ExecutionEngine/Orc/CMakeLists.txt

# Return to top-level
cd ..

# Apply patches for clang
cd clang
patch -Np1 -i ../../patches/llvm15-clang-alpine/10-add-musl-triples.patch
patch -Np1 -i ../../patches/llvm15-clang-alpine/clang-003-as-needed.patch

# Apply patches for compiler-rt 
cd ../compiler-rt
patch -Np2 -i ../../patches/llvm15-compiler-rt-alpine/compiler-rt-sanitizer-ppc64-musl.patch
patch -Np2 -i ../../patches/llvm15-compiler-rt-alpine/compiler-rt-sanitizer-supported-arch.patch

# Apply patches for libcxx
cd ../libcxx
patch -Np2 -i ../../patches/llvm15-libcxx-alpine/libcxx-musl.patch
patch -Np2 -i ../../patches/llvm15-libcxx-alpine/libcxx-ppc.patch

cd ..

# Set flags to greatly reduce debugging symbols
CFLAGS=' -g -g1 -Wl,--as-needed -lexecinfo'
CXXFLAGS=$CFLAGS
export CFLAGS CXXFLAGS

# Set the compiler and linker flags...
export LINKERFLAGS="-Wl,-dynamic-linker /cgnutools/lib/ld-musl-x86_64.so.1"
export  CTOOLS="-DCMAKE_C_COMPILER=${CMLFS_TARGET}-gcc "
export CTOOLS+="-DCMAKE_CXX_COMPILER=${CMLFS_TARGET}-g++ "
export CTOOLS+="-DCLANG_DEFAULT_LINKER=/cgnutools/bin/ld.lld "

# Set the tuples & build target ...
export  CTARG="-DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-pc-linux-musl " 
export CTARG+="-DLLVM_HOST_TRIPLE=x86_64-pc-linux-musl " 
export CTARG+="-DLLVM_TARGETS_TO_BUILD=X86 "
export CTARG+="-DLLVM_TARGET_ARCH=X86 "
export CTARG+="-DLLVM_TARGETS_TO_BUILD=Native "

# Set the paths ...
export  CPATHS="-DCMAKE_INSTALL_PREFIX=/cgnutools "
export CPATHS+="-DDEFAULT_SYSROOT=/cgnutools "
export CPATHS+="-DLIBUNWIND_INSTALL_LIBRARY_DIR=/cgnutools/lib "
export CPATHS+="-DCMAKE_INSTALL_OLDINCLUDEDIR=/cgnutools/include "

cmake -B build -G Ninja -Wno-dev -S llvm  \
  -DCMAKE_BUILD_TYPE=Release \
  -DLLVM_ENABLE_PROJECTS="clang" \
  -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
  -DCMAKE_EXE_LINKER_FLAGS="${LINKERFLAGS}" \
  -DCMAKE_SHARED_LINKER_FLAGS="${LINKERFLAGS}  -Wl,--as-needed -lexecinfo" \
  ${CTOOLS} ${CTARG} ${CPATHS} -DCLANG_VENDOR="cgnutools 3.0.0" \
  -DBENCHMARK_INSTALL_DOCS=OFF -DBENCHMARK_USE_BUNDLED_GTEST=OFF -DCLANG_INCLUDE_DOCS=OFF -DCLANG_INCLUDE_TESTS=OFF \
  -DCLANG_TOOL_AMDGPU_ARCH_BUILD=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
  -DCUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE=OFF -DCUDA_HOST_COMPILATION_CPP=OFF  \
  -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_LIBEDIT=OFF -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_OCAMLDOC=OFF \
  -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_ZSTD=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_DOCS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
  -DCLANG_TOOL_CLANG_FUZZER_BUILD=OFF -DCLANG_TOOL_CLANG_NVLINK_WRAPPER_BUILD=OFF -DCUDA_PROPAGATE_HOST_FLAGS=OFF \
  -DLLVM_ENABLE_LIBPFM=OFF -DLLVM_TOOL_XCODE_TOOLCHAIN_BUILD=OFF -DLLVM_ENABLE_UNWIND_TABLES=OFF 

# Compile
ninja -C build runtimes # 2642 targets .... fails. "Compiler doesn't support generation of unwind tables 
                        # if exception support is disabled.  Building libunwind DSO with runtime dependency 
                        # on C++ ABI library is not supported.

unset CC CXX CFLAGS CXXFLAGS CTOOLS CTARG CPATHS 
